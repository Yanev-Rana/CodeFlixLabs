[{"code":"#include<stdio.h>\r\n#include<string.h>\r\nvoid reverse(char* str1, int len){\r\n    int i = 0;\r\n    int j = len-1;\r\n    while(i<=j){\r\n        char temp = str1[i];\r\n        str1[i] = str1[j];\r\n        str1[j] = temp;\r\n        i++;\r\n        j--;\r\n    }\r\n}\r\nint main(){\r\n    char str[40];\r\n    fgets(str, sizeof(str), stdin);\r\n    str[strcspn(str,\"\\n\")] = '\\0';\r\n    char str1[40];\r\n    strcpy(str1,str);\r\n    int len = strlen(str);\r\n    reverse(str1,len);\r\n    int i = 0;\r\n    int j = len-1;\r\n    while(i<len && str[i]!=str1[i]) i++;\r\n    while(j>=0 && str[j]!=str1[j]) j--;\r\n    if(i<=j){\r\n        for(int k=i;k<=j;k++){\r\n        printf(\"%c\",str[k]);\r\n        }\r\n    }\r\n    return 0;\r\n}","language":"c","time":"2025-04-29T05:01:12.981Z","isCorrect":false},{"code":"#include <stdio.h>\r\n#include <string.h>\r\n#include <stdlib.h>\r\n\r\nchar* longestPalindrome(char* s) {\r\n    int n = strlen(s);\r\n    if (n < 1) return \"\";\r\n\r\n    int start = 0;\r\n    int maxLength = 1;\r\n\r\n    // Create a table to store palindrome information\r\n    int dp[n][n];\r\n    for (int i = 0; i < n; i++) {\r\n        for (int j = 0; j < n; j++) {\r\n            dp[i][j] = 0; // Initialize all entries to 0 (false)\r\n        }\r\n    }\r\n\r\n    // All single characters are palindromes\r\n    for (int i = 0; i < n; i++) {\r\n        dp[i][i] = 1;\r\n    }\r\n\r\n    // Check for palindromes of length 2\r\n    for (int i = 0; i < n - 1; i++) {\r\n        if (s[i] == s[i + 1]) {\r\n            dp[i][i + 1] = 1;\r\n            start = i;\r\n            maxLength = 2;\r\n        }\r\n    }\r\n\r\n    // Check for palindromes of length greater than 2\r\n    for (int k = 3; k <= n; k++) {\r\n        for (int i = 0; i < n - k + 1; i++) {\r\n            int j = i + k - 1;\r\n            if (s[i] == s[j] && dp[i + 1][j - 1]) {\r\n                dp[i][j] = 1;\r\n                if (k > maxLength) {\r\n                    start = i;\r\n                    maxLength = k;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Extract the longest palindromic substring\r\n    char* longestPal = (char*)malloc((maxLength + 1) * sizeof(char));\r\n    strncpy(longestPal, s + start, maxLength);\r\n    longestPal[maxLength] = '\\0';\r\n\r\n    return longestPal;\r\n}\r\n\r\nint main() {\r\n    char s[1000];\r\n    scanf(\"%s\", s);\r\n\r\n    char* result = longestPalindrome(s);\r\n    printf(\"%s\", result);\r\n    free(result);\r\n\r\n    return 0;\r\n}\r\n","language":"c","time":"2025-04-29T05:09:15.259Z","isCorrect":true}]